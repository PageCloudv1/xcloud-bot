import { GoogleGenerativeAI } from '@google/generative-ai';
import logger from '../utils/logger.js';

class AIService {
  constructor() {
    this.genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY);
    this.model = this.genAI.getGenerativeModel({
      model: process.env.GEMINI_MODEL || 'gemini-2.0-flash-exp',
    });
  }

  /**
   * Analisa uma issue e sugere labels e prioridade
   * @param {Object} issue - Objeto da issue do GitHub
   * @returns {Promise<Object>} An√°lise da issue
   */
  async analyzeIssue(issue) {
    try {
      const prompt = `
Analise esta issue do GitHub e forne√ßa uma resposta em JSON:

**T√≠tulo:** ${issue.title}
**Descri√ß√£o:** ${issue.body || 'Sem descri√ß√£o'}
**Labels existentes:** ${issue.labels?.map(l => l.name).join(', ') || 'Nenhuma'}

Forne√ßa uma an√°lise em JSON com:
1. "labels": array de labels sugeridas (bug, enhancement, documentation, question, etc.)
2. "priority": prioridade (low, medium, high, critical)
3. "category": categoria t√©cnica (frontend, backend, database, security, etc.)
4. "estimated_complexity": complexidade estimada (simple, medium, complex)
5. "suggested_assignees": array de tipos de desenvolvedores necess√°rios
6. "response": resposta amig√°vel para comentar na issue (em portugu√™s)

Responda APENAS com JSON v√°lido.
`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      // Tenta fazer parse do JSON
      try {
        return JSON.parse(text);
      } catch (parseError) {
        logger.warn('Resposta da IA n√£o √© JSON v√°lido:', text);
        return this.getFallbackIssueAnalysis(issue);
      }
    } catch (error) {
      logger.error('Erro ao analisar issue com IA:', error);
      return this.getFallbackIssueAnalysis(issue);
    }
  }

  /**
   * Analisa um Pull Request
   * @param {Object} pr - Objeto do PR do GitHub
   * @param {Array} files - Arquivos modificados
   * @returns {Promise<Object>} An√°lise do PR
   */
  async analyzePullRequest(pr, files = []) {
    try {
      const filesList = files
        .map(f => `${f.filename} (+${f.additions}/-${f.deletions})`)
        .join('\n');

      const prompt = `
Analise este Pull Request do GitHub:

**T√≠tulo:** ${pr.title}
**Descri√ß√£o:** ${pr.body || 'Sem descri√ß√£o'}
**Arquivos modificados:**
${filesList}

**Total de mudan√ßas:** +${pr.additions || 0}/-${pr.deletions || 0}

Forne√ßa an√°lise em JSON com:
1. "size": tamanho do PR (XS, S, M, L, XL, XXL)
2. "type": tipo de mudan√ßa (feature, bugfix, refactor, docs, style, test)
3. "risk_level": n√≠vel de risco (low, medium, high)
4. "review_time_estimate": tempo estimado de review em minutos
5. "suggestions": array de sugest√µes de melhoria
6. "labels": labels sugeridas
7. "response": coment√°rio amig√°vel para o PR (em portugu√™s)

Responda APENAS com JSON v√°lido.
`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      const text = response.text();

      try {
        return JSON.parse(text);
      } catch (parseError) {
        logger.warn('Resposta da IA n√£o √© JSON v√°lido:', text);
        return this.getFallbackPRAnalysis(pr);
      }
    } catch (error) {
      logger.error('Erro ao analisar PR com IA:', error);
      return this.getFallbackPRAnalysis(pr);
    }
  }

  /**
   * Responde a uma men√ß√£o do bot
   * @param {string} comment - Coment√°rio que menciona o bot
   * @param {Object} context - Contexto (issue, PR, etc.)
   * @returns {Promise<string>} Resposta do bot
   */
  async respondToMention(comment, context) {
    try {
      const prompt = `
Voc√™ √© o xcloud-bot, um assistente inteligente para reposit√≥rios GitHub.

**Contexto:** ${context.type} - "${context.title}"
**Coment√°rio do usu√°rio:** ${comment}

Responda de forma √∫til e amig√°vel em portugu√™s. Seja conciso mas informativo.
Se o usu√°rio pedir ajuda com c√≥digo, an√°lise ou sugest√µes, forne√ßa respostas pr√°ticas.

Resposta:
`;

      const result = await this.model.generateContent(prompt);
      const response = await result.response;
      return response.text();
    } catch (error) {
      logger.error('Erro ao responder men√ß√£o:', error);
      return 'ü§ñ Ol√°! Sou o xcloud-bot. Desculpe, estou com dificuldades t√©cnicas no momento. Tente novamente em alguns minutos.';
    }
  }

  /**
   * An√°lise de fallback para issues
   */
  getFallbackIssueAnalysis(issue) {
    const title = issue.title.toLowerCase();
    const body = (issue.body || '').toLowerCase();

    let labels = [];
    let priority = 'medium';
    let category = 'general';

    // An√°lise simples baseada em palavras-chave
    if (title.includes('bug') || body.includes('erro') || body.includes('error')) {
      labels.push('bug');
      priority = 'high';
    }

    if (title.includes('feature') || title.includes('funcionalidade')) {
      labels.push('enhancement');
    }

    if (title.includes('doc') || body.includes('documenta√ß√£o')) {
      labels.push('documentation');
      category = 'documentation';
    }

    if (title.includes('urgent') || title.includes('cr√≠tico')) {
      priority = 'critical';
    }

    return {
      labels,
      priority,
      category,
      estimated_complexity: 'medium',
      suggested_assignees: ['developer'],
      response: `üëã Ol√°! Analisei sua issue e identifiquei que se trata de um **${labels[0] || 'item'}** com prioridade **${priority}**. 

üîç **An√°lise inicial:**
- Categoria: ${category}
- Complexidade estimada: m√©dia

üìã **Pr√≥ximos passos:**
- Vou adicionar as labels apropriadas
- A equipe ser√° notificada automaticamente

*An√°lise gerada pelo xcloud-bot* ü§ñ`,
    };
  }

  /**
   * An√°lise de fallback para PRs
   */
  getFallbackPRAnalysis(pr) {
    const additions = pr.additions || 0;
    const deletions = pr.deletions || 0;
    const total = additions + deletions;

    let size = 'M';
    if (total < 10) size = 'XS';
    else if (total < 50) size = 'S';
    else if (total < 200) size = 'M';
    else if (total < 500) size = 'L';
    else if (total < 1000) size = 'XL';
    else size = 'XXL';

    return {
      size,
      type: 'feature',
      risk_level: total > 500 ? 'high' : 'medium',
      review_time_estimate: Math.min(total / 10, 120),
      suggestions: ['Considere dividir PRs grandes em menores', 'Adicione testes se necess√°rio'],
      labels: [`size:${size}`],
      response: `üîç **An√°lise do PR:**

üìä **Estat√≠sticas:**
- Tamanho: ${size} (+${additions}/-${deletions})
- Tempo estimado de review: ${Math.min(total / 10, 120)} minutos

‚úÖ **Recomenda√ß√µes:**
- ${total > 500 ? 'Considere dividir este PR em partes menores' : 'Tamanho adequado para review'}
- Verifique se h√° testes cobrindo as mudan√ßas

*An√°lise gerada pelo xcloud-bot* ü§ñ`,
    };
  }
}

export default new AIService();
