/**
 * üß† Integra√ß√£o com Gemini API
 *
 * Interface para integrar com o Gemini AI via API direta
 */

import { exec } from 'child_process';
import dotenv from 'dotenv';
import fs from 'fs/promises';
import path from 'path';
import { promisify } from 'util';

dotenv.config();
const execAsync = promisify(exec);

function normalizeGeminiResponse(output) {
  const trimmed = (output ?? '').trim();

  if (!trimmed) {
    return {
      raw: '',
      text: '',
      data: null,
      isJson: false,
    };
  }

  const withoutFences = trimmed
    .replace(/^```(?:json)?/i, '')
    .replace(/```$/i, '')
    .trim();

  let parsed = null;
  let isJson = false;

  const tryParse = candidate => {
    try {
      parsed = JSON.parse(candidate);
      isJson = true;
    } catch (error) {
      parsed = null;
      isJson = false;
    }
  };

  tryParse(withoutFences);

  if (!isJson) {
    const firstBrace = withoutFences.indexOf('{');
    const lastBrace = withoutFences.lastIndexOf('}');

    if (firstBrace !== -1 && lastBrace !== -1 && lastBrace > firstBrace) {
      const jsonCandidate = withoutFences.slice(firstBrace, lastBrace + 1);
      tryParse(jsonCandidate);
    }
  }

  return {
    raw: trimmed,
    text: withoutFences,
    data: parsed,
    isJson,
  };
}

/**
 * Executa an√°lise usando Gemini CLI
 * @param {string} prompt - Prompt para an√°lise
 * @param {object} context - Contexto adicional
 * @param {object} options - Op√ß√µes de execu√ß√£o
 * @returns {Promise<object>} Resultado da an√°lise
 */
/**
 * Alternativa usando API direta do Gemini
 * Para evitar problemas com extens√µes IDE
 */
export async function analyzeWithGeminiAPI(prompt, _context = {}, _options = {}) {
  try {
    const apiKey = process.env.GEMINI_API_KEY;
    if (!apiKey) {
      throw new Error('GEMINI_API_KEY n√£o configurada');
    }

    console.log('üîÑ Fazendo request para Gemini API...');

    const response = await fetch(
      `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent?key=${apiKey}`,
      {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          contents: [
            {
              parts: [
                {
                  text: prompt,
                },
              ],
            },
          ],
        }),
      }
    );

    console.log('üì° Response status:', response.status);

    if (!response.ok) {
      const errorText = await response.text();
      throw new Error(`Gemini API error: ${response.status} ${response.statusText} - ${errorText}`);
    }

    const data = await response.json();
    console.log('üìä Gemini response data:', JSON.stringify(data, null, 2));

    const content = data.candidates?.[0]?.content?.parts?.[0]?.text;
    const finishReason = data.candidates?.[0]?.finishReason;

    if (!content) {
      // Se chegou ao limite de tokens, retorna uma resposta b√°sica
      if (finishReason === 'MAX_TOKENS') {
        return {
          ...normalizeGeminiResponse(
            'An√°lise realizada. Reposit√≥rio com workflows funcionais. Considere otimiza√ß√µes de performance.'
          ),
          truncated: true,
          provider: 'gemini-api',
        };
      }
      throw new Error('Resposta vazia da API Gemini');
    }

    console.log('‚úÖ Gemini response content:', content);

    const normalized = normalizeGeminiResponse(content);
    return {
      ...normalized,
      truncated: finishReason === 'MAX_TOKENS',
      provider: 'gemini-api',
    };
  } catch (error) {
    console.error('‚ùå Erro na API Gemini:', error.message);
    throw error;
  }
}

export async function analyzeWithGemini(prompt, context = {}, options = {}) {
  // Primeiro tenta a API direta
  let apiError;
  try {
    console.log('üß† Tentando an√°lise via API Gemini...');
    return await analyzeWithGeminiAPI(prompt, context, options);
  } catch (error) {
    apiError = error;
    console.warn('‚ö†Ô∏è API Gemini falhou:', apiError.message);
  }

  // Fallback para CLI (sem extens√µes IDE)
  try {
    console.log('üß† Tentando an√°lise via CLI Gemini...');

    const command = `echo "${prompt.replace(/"/g, '\\"')}" | gemini --output-format text`;

    const { stdout, stderr } = await execAsync(command, {
      timeout: options.timeout || 30000,
      maxBuffer: options.maxBuffer || 1024 * 1024,
      env: { ...process.env, GEMINI_NO_IDE: '1' },
    });

    // Ignora erros de IDE
    if (stderr && !stderr.includes('[ERROR] [IDEClient]')) {
      console.warn('‚ö†Ô∏è Gemini stderr:', stderr);
    }

    const normalized = normalizeGeminiResponse(stdout);

    return {
      ...normalized,
      provider: 'gemini-cli',
    };
  } catch (cliError) {
    console.error('‚ùå Todas as tentativas de an√°lise Gemini falharam');
    const apiMessage = apiError?.message || 'N/A';
    throw new Error(`Gemini indispon√≠vel. API: ${apiMessage}, CLI: ${cliError?.message || 'N/A'}`);
  }
}

/**
 * Analisa um reposit√≥rio usando Gemini
 * @param {string} repoName - Nome do reposit√≥rio
 * @param {string} analysisType - Tipo de an√°lise
 * @returns {Promise<object>} An√°lise do reposit√≥rio
 */
export async function analyzeRepository(repoName, analysisType = 'general') {
  const prompts = {
    general: `
      Analise o reposit√≥rio ${repoName} e forne√ßa:
      1. Resumo da funcionalidade
      2. Tecnologias utilizadas
      3. Qualidade do c√≥digo
      4. Sugest√µes de melhorias
      5. Recomenda√ß√µes de CI/CD
      
      Retorne como JSON com as chaves: summary, technologies, quality_score, improvements, cicd_recommendations
    `,

    workflows: `
      Analise os workflows GitHub Actions do reposit√≥rio ${repoName}:
      1. Workflows existentes
      2. Efici√™ncia dos builds
      3. Cobertura de testes
      4. Seguran√ßa dos workflows
      5. Otimiza√ß√µes sugeridas
      
      Retorne como JSON com as chaves: existing_workflows, build_efficiency, test_coverage, security_issues, optimizations
    `,

    security: `
      Fa√ßa uma an√°lise de seguran√ßa do reposit√≥rio ${repoName}:
      1. Vulnerabilidades conhecidas
      2. Configura√ß√µes inseguras
      3. Exposi√ß√£o de secrets
      4. Recomenda√ß√µes de seguran√ßa
      
      Retorne como JSON com as chaves: vulnerabilities, insecure_configs, exposed_secrets, security_recommendations
    `,

    performance: `
      Analise a performance dos workflows do reposit√≥rio ${repoName}:
      1. Tempo m√©dio de build
      2. Workflows mais lentos
      3. Uso de cache
      4. Paraleliza√ß√£o
      5. Sugest√µes de otimiza√ß√£o
      
      Retorne como JSON com as chaves: avg_build_time, slow_workflows, cache_usage, parallelization, optimizations
    `,
  };

  const prompt = prompts[analysisType] || prompts.general;

  return await analyzeWithGemini(prompt, {
    repository: repoName,
    analysis_type: analysisType,
    timestamp: new Date().toISOString(),
  });
}

/**
 * Analisa um issue espec√≠fico
 * @param {object} issue - Dados do issue
 * @returns {Promise<object>} An√°lise do issue
 */
export async function analyzeIssue(issue) {
  const prompt = `
    Analise este issue do GitHub e categorize-o:
    
    T√≠tulo: ${issue.title}
    Corpo: ${issue.body || 'Sem descri√ß√£o'}
    
    Forne√ßa:
    1. Tipo (bug, feature, enhancement, documentation, question)
    2. Prioridade (low, medium, high, critical)
    3. Labels sugeridas
    4. Estimativa de complexidade (1-5)
    5. Sugest√µes para o assignee
    
    Retorne como JSON com as chaves: type, priority, labels, complexity, assignee_suggestions
  `;

  const result = await analyzeWithGemini(prompt, {
    issue_title: issue.title,
    issue_body: issue.body,
    repository: issue.repository_url,
  });

  const fallback = {
    type: 'question',
    priority: 'medium',
    labels: [],
    complexity: 3,
    assignee_suggestions: [],
    summary: result.text || result.raw,
  };

  if (result.isJson && result.data && typeof result.data === 'object') {
    return {
      ...fallback,
      ...result.data,
      raw: result.raw,
      provider: result.provider,
      isStructured: true,
    };
  }

  return {
    ...fallback,
    raw: result.raw,
    provider: result.provider,
    isStructured: false,
  };
}

/**
 * Analisa um Pull Request
 * @param {object} pr - Dados do PR
 * @param {Array} files - Arquivos modificados
 * @returns {Promise<object>} An√°lise do PR
 */
export async function analyzePullRequest(pr, files = []) {
  const filesSummary = files.map(f => ({
    filename: f.filename,
    status: f.status,
    additions: f.additions,
    deletions: f.deletions,
  }));

  const prompt = `
    Analise este Pull Request:
    
    T√≠tulo: ${pr.title}
    Descri√ß√£o: ${pr.body || 'Sem descri√ß√£o'}
    
    Arquivos modificados: ${filesSummary.length} arquivos
    ${filesSummary.map(f => `- ${f.filename} (${f.status}): +${f.additions}/-${f.deletions}`).join('\n')}
    
    Forne√ßa:
    1. Tipo de mudan√ßa (feature, bugfix, refactor, docs, etc)
    2. Impacto (low, medium, high)
    3. Riscos potenciais
    4. Sugest√µes de revis√£o
    5. Necessidade de testes adicionais
    
    Retorne como JSON com as chaves: change_type, impact, risks, review_suggestions, testing_needed
  `;

  return await analyzeWithGemini(prompt, {
    pr_title: pr.title,
    pr_body: pr.body,
    files_count: files.length,
    files_summary: filesSummary,
  });
}

/**
 * Gera relat√≥rio de workflow failure
 * @param {object} workflowRun - Dados do workflow run
 * @returns {Promise<object>} Relat√≥rio de falha
 */
export async function analyzeWorkflowFailure(workflowRun) {
  const prompt = `
    Analise esta falha de workflow:
    
    Workflow: ${workflowRun.name}
    Branch: ${workflowRun.head_branch}
    Conclus√£o: ${workflowRun.conclusion}
    
    Forne√ßa:
    1. Poss√≠veis causas da falha
    2. Passos para investiga√ß√£o
    3. Solu√ß√µes comuns
    4. Preven√ß√£o futura
    
    Retorne como JSON com as chaves: possible_causes, investigation_steps, common_solutions, prevention
  `;

  return await analyzeWithGemini(prompt, {
    workflow_name: workflowRun.name,
    branch: workflowRun.head_branch,
    conclusion: workflowRun.conclusion,
    run_url: workflowRun.html_url,
  });
}

/**
 * Salva resultado de an√°lise em arquivo
 * @param {string} filename - Nome do arquivo
 * @param {object} data - Dados para salvar
 */
export async function saveAnalysis(filename, data) {
  try {
    const analysisDir = path.join(process.cwd(), 'analysis-results');
    await fs.mkdir(analysisDir, { recursive: true });

    const filePath = path.join(analysisDir, `${filename}-${Date.now()}.json`);
    await fs.writeFile(filePath, JSON.stringify(data, null, 2));

    console.log(`üíæ An√°lise salva em: ${filePath}`);
    return filePath;
  } catch (error) {
    console.error('‚ùå Erro ao salvar an√°lise:', error);
    throw error;
  }
}

/**
 * Carrega hist√≥rico de an√°lises
 * @param {string} repoName - Nome do reposit√≥rio
 * @returns {Promise<Array>} Hist√≥rico de an√°lises
 */
export async function loadAnalysisHistory(repoName) {
  try {
    const analysisDir = path.join(process.cwd(), 'analysis-results');
    const files = await fs.readdir(analysisDir);

    const repoFiles = files.filter(f => f.startsWith(repoName) && f.endsWith('.json'));

    const history = [];
    for (const file of repoFiles) {
      const filePath = path.join(analysisDir, file);
      const content = await fs.readFile(filePath, 'utf-8');
      history.push(JSON.parse(content));
    }

    return history.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));
  } catch (error) {
    console.error('‚ùå Erro ao carregar hist√≥rico:', error);
    return [];
  }
}
