name: '🤖 Autonomous Agent - xBot Assignment Handler'

on:
  issues:
    types: [assigned, unassigned]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process manually'
        required: true
        type: string
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'simulate_assignment'
          - 'check_status'
          - 'stop_tasks'
      repository:
        description: 'Repository (owner/repo)'
        required: false
        type: string

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number || inputs.issue_number }}'
  cancel-in-progress: true

defaults:
  run:
    shell: 'bash'

jobs:
  autonomous-agent:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 45
    permissions:
      contents: 'write'
      issues: 'write'
      pull-requests: 'write'
      actions: 'write'
    env:
      XBOT_USERNAME: 'xcloud-bot'
    
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version: '20' # Padronizado para Node.js v20
          cache: 'npm'

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Setup Podman'
        run: |
          echo "🐳 Configurando Podman..."

          # Instalar Podman se não estiver disponível
          if ! command -v podman &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y podman
          fi

          # Verificar instalação
          podman --version

          # Configurar Podman para uso sem root (adicionar apenas se não existir)
          if ! sudo grep -q "unqualified-search-registries = ['docker.io']" /etc/containers/registries.conf; then
            echo "unqualified-search-registries = ['docker.io']" | sudo tee -a /etc/containers/registries.conf
            echo "Adicionada configura\u00e7\u00e3o unqualified-search-registries."
          else
            echo "Configura\u00e7\u00e3o unqualified-search-registries j\u00e1 existe."
          fi

          # Testar Podman
          podman info

          echo "✅ Podman configurado com sucesso"

      - name: 'Process Assignment Event'
        if: github.event_name == 'issues'
        id: 'process_assignment'
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
        run: |
          node ./src/utils/github_agent_handler.js \
            handleAssignmentEvent \
            "$GH_TOKEN" \
            "$GEMINI_API_KEY" \
            "$XBOT_USERNAME" \
            '${{ toJSON(github.event) }}' \
            >> "$GITHUB_OUTPUT"

      - name: 'Manual Action'
        if: github.event_name == 'workflow_dispatch'
        env:
          GH_TOKEN: '${{ secrets.GH_TOKEN }}'
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
        run: |
          node ./src/utils/github_agent_handler.js \
            handleManualAction \
            "$GH_TOKEN" \
            "$GEMINI_API_KEY" \
            "$XBOT_USERNAME" \
            '${{ inputs.action }}' \
            '${{ inputs.issue_number }}' \
            '${{ inputs.repository || github.repository }}'

      - name: 'Cleanup Containers'
        if: always()
        run: |
          echo "🧹 Limpando containers órfãos..."
          
          # Listar containers xbot
          XBOT_CONTAINERS=$(podman ps -a --filter "name=xbot-" --format "{{.Names}}" || true)
          
          if [ -n "$XBOT_CONTAINERS" ]; then
            echo "Containers encontrados:"
            echo "$XBOT_CONTAINERS"
            
            # Parar e remover containers
            echo "$XBOT_CONTAINERS" | while read container; do
              if [ -n "$container" ]; then
                echo "Removendo container: $container"
                podman stop "$container" 2>/dev/null || true
                podman rm "$container" 2>/dev/null || true
              fi
            done
          else
            echo "Nenhum container xbot encontrado"
          fi
          
          echo "✅ Limpeza concluída"

      - name: 'Summary'
        if: always()
        run: |
          echo "📋 Resumo da Execução"
          echo "===================="
          echo "Event: ${{ github.event_name }}"
          
          if [ "${{ github.event_name }}" == "issues" ]; then
            echo "Action: ${{ github.event.action }}"
            echo "Issue: #${{ github.event.issue.number }}"
            echo "Assignee: ${{ github.event.assignee.login }}"
            echo "xBot Assigned: ${{ steps.process_assignment.outputs.XBOT_ASSIGNED }}"
          else
            echo "Manual Action: ${{ inputs.action }}"
            echo "Issue: #${{ inputs.issue_number }}"
          fi
          
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          
          echo ""
          echo "🤖 xCloud Bot Autonomous Agent"
          echo "Status: Execução concluída"