name: '🤖 Autonomous Agent - xBot Assignment Handler'

on:
  issues:
    types: [assigned, unassigned]
  workflow_dispatch:
    inputs:
      issue_number:
        description: 'Issue number to process manually'
        required: true
        type: string
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - 'simulate_assignment'
          - 'check_status'
          - 'stop_tasks'
      repository:
        description: 'Repository (owner/repo)'
        required: false
        type: string

concurrency:
  group: '${{ github.workflow }}-${{ github.event.issue.number || inputs.issue_number }}'
  cancel-in-progress: false

defaults:
  run:
    shell: 'bash'

jobs:
  autonomous-agent:
    runs-on: 'ubuntu-latest'
    timeout-minutes: 45
    permissions:
      contents: 'write'
      issues: 'write'
      pull-requests: 'write'
      actions: 'write'
    
    steps:
      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'

      - name: 'Setup Node.js'
        uses: 'actions/setup-node@v4'
        with:
          node-version: '18'
          cache: 'npm'

      - name: 'Install dependencies'
        run: npm ci

      - name: 'Setup Podman'
        run: |
          echo "🐳 Configurando Podman..."
          
          # Instalar Podman se não estiver disponível
          if ! command -v podman &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y podman
          fi
          
          # Verificar instalação
          podman --version
          
          # Configurar Podman para uso sem root
          echo "unqualified-search-registries = ['docker.io']" | sudo tee -a /etc/containers/registries.conf
          
          # Testar Podman
          podman info
          
          echo "✅ Podman configurado com sucesso"

      - name: 'Process Assignment Event'
        if: github.event_name == 'issues'
        id: 'process_assignment'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          XBOT_USERNAME: 'xcloud-bot'
        run: |
          echo "🤖 Processando evento de assignment..."
          
          # Informações do evento
          echo "Event: ${{ github.event.action }}"
          echo "Issue: #${{ github.event.issue.number }}"
          echo "Assignee: ${{ github.event.assignee.login }}"
          echo "Repository: ${{ github.repository }}"
          
          # Verificar se é assignment do xBot
          ASSIGNEE="${{ github.event.assignee.login }}"
          if [[ "$ASSIGNEE" == "xcloud-bot" || "$ASSIGNEE" == "xbot" || "$ASSIGNEE" == "$XBOT_USERNAME" ]]; then
            echo "✅ xBot foi assignado, iniciando processamento..."
            
            # Executar o agente autônomo
            node -e "
              const { AutonomousAgent } = require('./src/agents/AutonomousAgent');
              const agent = new AutonomousAgent();
              
              const payload = {
                action: '${{ github.event.action }}',
                issue: {
                  number: ${{ github.event.issue.number }},
                  title: \`${{ github.event.issue.title }}\`,
                  body: \`${{ github.event.issue.body }}\`,
                  html_url: '${{ github.event.issue.html_url }}'
                },
                assignee: {
                  login: '${{ github.event.assignee.login }}'
                },
                repository: {
                  full_name: '${{ github.repository }}'
                }
              };
              
              agent.handleAssignment(payload)
                .then(task => {
                  if (task) {
                    console.log('✅ Tarefa criada:', task.id);
                    process.exit(0);
                  } else {
                    console.log('ℹ️ Não é assignment para xBot');
                    process.exit(0);
                  }
                })
                .catch(error => {
                  console.error('❌ Erro:', error.message);
                  process.exit(1);
                });
            "
            
            echo "XBOT_ASSIGNED=true" >> $GITHUB_OUTPUT
          else
            echo "ℹ️ Assignment não é para o xBot ($ASSIGNEE)"
            echo "XBOT_ASSIGNED=false" >> $GITHUB_OUTPUT
          fi

      - name: 'Manual Action'
        if: github.event_name == 'workflow_dispatch'
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
          GEMINI_API_KEY: '${{ secrets.GEMINI_API_KEY }}'
          XBOT_USERNAME: 'xcloud-bot'
        run: |
          echo "🔧 Executando ação manual: ${{ inputs.action }}"
          
          case "${{ inputs.action }}" in
            "simulate_assignment")
              echo "🎭 Simulando assignment para issue #${{ inputs.issue_number }}"
              
              # Simular payload de assignment
              node -e "
                const { AutonomousAgent } = require('./src/agents/AutonomousAgent');
                const agent = new AutonomousAgent();
                
                // Buscar informações da issue via API
                const { Octokit } = require('@octokit/rest');
                const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
                
                const [owner, repo] = '${{ inputs.repository || github.repository }}'.split('/');
                
                octokit.rest.issues.get({
                  owner,
                  repo,
                  issue_number: ${{ inputs.issue_number }}
                }).then(({ data: issue }) => {
                  const payload = {
                    action: 'assigned',
                    issue: {
                      number: issue.number,
                      title: issue.title,
                      body: issue.body,
                      html_url: issue.html_url
                    },
                    assignee: {
                      login: 'xcloud-bot'
                    },
                    repository: {
                      full_name: '${{ inputs.repository || github.repository }}'
                    }
                  };
                  
                  return agent.handleAssignment(payload);
                }).then(task => {
                  if (task) {
                    console.log('✅ Simulação concluída, tarefa criada:', task.id);
                  } else {
                    console.log('ℹ️ Simulação executada');
                  }
                }).catch(error => {
                  console.error('❌ Erro na simulação:', error.message);
                  process.exit(1);
                });
              "
              ;;
              
            "check_status")
              echo "📊 Verificando status das tarefas ativas..."
              
              node -e "
                const { AutonomousAgent } = require('./src/agents/AutonomousAgent');
                const agent = new AutonomousAgent();
                
                const tasks = agent.getActiveTasks();
                console.log('Tarefas ativas:', JSON.stringify(tasks, null, 2));
              "
              ;;
              
            "stop_tasks")
              echo "🛑 Parando todas as tarefas ativas..."
              
              node -e "
                const { AutonomousAgent } = require('./src/agents/AutonomousAgent');
                const agent = new AutonomousAgent();
                
                agent.stopAllTasks().then(() => {
                  console.log('✅ Todas as tarefas foram paradas');
                }).catch(error => {
                  console.error('❌ Erro ao parar tarefas:', error.message);
                  process.exit(1);
                });
              "
              ;;
              
            *)
              echo "❌ Ação não reconhecida: ${{ inputs.action }}"
              exit 1
              ;;
          esac

      - name: 'Cleanup Containers'
        if: always()
        run: |
          echo "🧹 Limpando containers órfãos..."
          
          # Listar containers xbot
          XBOT_CONTAINERS=$(podman ps -a --filter "name=xbot-" --format "{{.Names}}" || true)
          
          if [ -n "$XBOT_CONTAINERS" ]; then
            echo "Containers encontrados:"
            echo "$XBOT_CONTAINERS"
            
            # Parar e remover containers
            echo "$XBOT_CONTAINERS" | while read container; do
              if [ -n "$container" ]; then
                echo "Removendo container: $container"
                podman stop "$container" 2>/dev/null || true
                podman rm "$container" 2>/dev/null || true
              fi
            done
          else
            echo "Nenhum container xbot encontrado"
          fi
          
          echo "✅ Limpeza concluída"

      - name: 'Summary'
        if: always()
        run: |
          echo "📋 Resumo da Execução"
          echo "===================="
          echo "Event: ${{ github.event_name }}"
          
          if [ "${{ github.event_name }}" == "issues" ]; then
            echo "Action: ${{ github.event.action }}"
            echo "Issue: #${{ github.event.issue.number }}"
            echo "Assignee: ${{ github.event.assignee.login }}"
            echo "xBot Assigned: ${{ steps.process_assignment.outputs.XBOT_ASSIGNED }}"
          else
            echo "Manual Action: ${{ inputs.action }}"
            echo "Issue: #${{ inputs.issue_number }}"
          fi
          
          echo "Repository: ${{ github.repository }}"
          echo "Workflow: ${{ github.workflow }}"
          echo "Run ID: ${{ github.run_id }}"
          
          echo ""
          echo "🤖 xCloud Bot Autonomous Agent"
          echo "Status: Execução concluída"