name: 🚀 Deploy - Advanced Environment Management

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
        - development
        - staging
        - production
        default: 'staging'
      deployment_strategy:
        description: 'Deployment strategy'
        required: true
        type: choice
        options:
        - rolling
        - blue-green
        - canary
        default: 'rolling'
      force_deploy:
        description: 'Force deployment (skip health checks)'
        required: false
        type: boolean
        default: false

  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      deployment_strategy:
        description: 'Deployment strategy'
        required: false
        type: string
        default: 'rolling'
    outputs:
      deployment-url:
        description: "Deployment URL"
        value: ${{ jobs.deploy.outputs.url }}
      deployment-version:
        description: "Deployed version"
        value: ${{ jobs.deploy.outputs.version }}

env:
  NODE_VERSION: '20'
  DEPLOY_ENV: ${{ inputs.environment }}
  DEPLOYMENT_STRATEGY: ${{ inputs.deployment_strategy || 'rolling' }}

jobs:
  validate-environment:
    name: 🔒 Validate Environment & Secrets
    runs-on: ubuntu-latest
    outputs:
      deploy-url: ${{ steps.env-config.outputs.deploy-url }}
      health-endpoint: ${{ steps.env-config.outputs.health-endpoint }}
      requires-approval: ${{ steps.env-config.outputs.requires-approval }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔧 Configure environment settings
      id: env-config
      run: |
        case "${{ env.DEPLOY_ENV }}" in
          "development")
            echo "deploy-url=https://dev.xcloud-bot.local" >> $GITHUB_OUTPUT
            echo "health-endpoint=https://dev.xcloud-bot.local/health" >> $GITHUB_OUTPUT
            echo "requires-approval=false" >> $GITHUB_OUTPUT
            ;;
          "staging")
            echo "deploy-url=https://staging.xcloud-bot.example.com" >> $GITHUB_OUTPUT
            echo "health-endpoint=https://staging.xcloud-bot.example.com/health" >> $GITHUB_OUTPUT
            echo "requires-approval=false" >> $GITHUB_OUTPUT
            ;;
          "production")
            echo "deploy-url=https://xcloud-bot.example.com" >> $GITHUB_OUTPUT
            echo "health-endpoint=https://xcloud-bot.example.com/health" >> $GITHUB_OUTPUT
            echo "requires-approval=true" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "❌ Invalid environment: ${{ env.DEPLOY_ENV }}"
            exit 1
            ;;
        esac
        
    - name: 🔐 Validate secrets
      run: |
        echo "🔍 Validating environment-specific secrets for ${{ env.DEPLOY_ENV }}..."
        # Add secret validation logic here
        echo "✅ Secrets validation completed"

  pre-deployment-checks:
    name: 🧪 Pre-deployment Checks
    runs-on: ubuntu-latest
    needs: validate-environment
    if: ${{ !inputs.force_deploy }}
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build application
      run: npm run build
      
    - name: 🧪 Run tests
      run: npm test
      
    - name: 🔍 Security checks
      run: npm audit --audit-level=moderate
      
    - name: 📊 Generate deployment report
      run: |
        echo "📊 Deployment Report for ${{ env.DEPLOY_ENV }}" > deployment-report.md
        echo "- Environment: ${{ env.DEPLOY_ENV }}" >> deployment-report.md
        echo "- Strategy: ${{ env.DEPLOYMENT_STRATEGY }}" >> deployment-report.md
        echo "- Timestamp: $(date -u)" >> deployment-report.md
        echo "- Commit: ${{ github.sha }}" >> deployment-report.md
        
    - name: 📤 Upload deployment artifacts
      uses: actions/upload-artifact@v4
      with:
        name: deployment-artifacts-${{ env.DEPLOY_ENV }}
        path: |
          dist/
          deployment-report.md
        retention-days: 30

  production-approval:
    name: 🛡️ Production Approval Gate
    runs-on: ubuntu-latest
    needs: [validate-environment, pre-deployment-checks]
    if: ${{ needs.validate-environment.outputs.requires-approval == 'true' }}
    environment: 
      name: production
      url: ${{ needs.validate-environment.outputs.deploy-url }}
    
    steps:
    - name: 🚀 Production deployment approved
      run: echo "✅ Production deployment has been approved"

  deploy:
    name: 🚀 Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [validate-environment, pre-deployment-checks]
    if: always() && (needs.pre-deployment-checks.result == 'success' || inputs.force_deploy) && (needs.production-approval.result == 'success' || needs.validate-environment.outputs.requires-approval == 'false')
    
    environment:
      name: ${{ inputs.environment }}
      url: ${{ needs.validate-environment.outputs.deploy-url }}
    
    outputs:
      url: ${{ needs.validate-environment.outputs.deploy-url }}
      version: ${{ steps.deployment-info.outputs.version }}
      strategy: ${{ env.DEPLOYMENT_STRATEGY }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 📥 Download deployment artifacts
      uses: actions/download-artifact@v4
      with:
        name: deployment-artifacts-${{ env.DEPLOY_ENV }}
        path: ./
        
    - name: 🚀 Execute deployment strategy
      id: deploy-execution
      run: |
        echo "🚀 Starting ${{ env.DEPLOYMENT_STRATEGY }} deployment to ${{ env.DEPLOY_ENV }}..."
        
        case "${{ env.DEPLOYMENT_STRATEGY }}" in
          "rolling")
            echo "🔄 Executing rolling deployment..."
            # Rolling deployment logic
            ;;
          "blue-green")
            echo "🔵🟢 Executing blue-green deployment..."
            # Blue-green deployment logic
            ;;
          "canary")
            echo "🐤 Executing canary deployment..."
            # Canary deployment logic
            ;;
        esac
        
        # Simulate deployment process
        sleep 10
        echo "✅ Deployment completed successfully"
        
    - name: 📊 Deployment info
      id: deployment-info
      run: |
        VERSION="1.0.0-${{ github.run_number }}"
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "📊 Deployed version: ${VERSION}"
        echo "🌍 Environment: ${{ env.DEPLOY_ENV }}"
        echo "📈 Strategy: ${{ env.DEPLOYMENT_STRATEGY }}"

  health-checks:
    name: 🏥 Health Checks
    runs-on: ubuntu-latest
    needs: [validate-environment, deploy]
    if: always() && needs.deploy.result == 'success'
    
    steps:
    - name: 🔍 Application startup check
      run: |
        echo "🔍 Checking application startup..."
        # Simulate health check
        sleep 5
        echo "✅ Application started successfully"
        
    - name: 🗄️ Database connection check
      run: |
        echo "🗄️ Checking database connections..."
        # Simulate database check
        sleep 3
        echo "✅ Database connections healthy"
        
    - name: 🌐 External API checks
      run: |
        echo "🌐 Checking external API connectivity..."
        # Simulate API checks
        sleep 3
        echo "✅ External APIs responding"
        
    - name: 📊 Performance metrics check
      run: |
        echo "📊 Checking performance metrics..."
        # Simulate performance check
        sleep 3
        echo "✅ Performance metrics within bounds"
        
    - name: 🚨 Error rate monitoring
      run: |
        echo "🚨 Monitoring error rates..."
        # Simulate error monitoring
        sleep 3
        echo "✅ Error rates below threshold"
        
    - name: 🏥 Comprehensive health check
      run: |
        HEALTH_URL="${{ needs.validate-environment.outputs.health-endpoint }}"
        echo "🏥 Running comprehensive health check against: ${HEALTH_URL}"
        
        # Simulate health endpoint check
        # In real scenario: curl -f "${HEALTH_URL}" || exit 1
        echo "✅ All health checks passed"

  post-deployment-monitoring:
    name: 📊 Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [validate-environment, deploy, health-checks]
    if: always() && needs.deploy.result == 'success' && needs.health-checks.result == 'success'
    
    steps:
    - name: 📊 Start monitoring
      run: |
        echo "📊 Starting post-deployment monitoring for ${{ env.DEPLOY_ENV }}..."
        echo "🔍 Monitoring deployment: ${{ needs.deploy.outputs.version }}"
        echo "🌍 Environment URL: ${{ needs.deploy.outputs.url }}"
        
    - name: 📈 Collect deployment metrics
      run: |
        echo "📈 Collecting deployment metrics..."
        echo "- Deployment time: $(date -u)"
        echo "- Strategy used: ${{ needs.deploy.outputs.strategy }}"
        echo "- Environment: ${{ env.DEPLOY_ENV }}"
        echo "- Version: ${{ needs.deploy.outputs.version }}"
        
    - name: 🔔 Send notifications
      run: |
        echo "🔔 Sending deployment notifications..."
        echo "✅ Deployment to ${{ env.DEPLOY_ENV }} completed successfully!"
        echo "🌍 URL: ${{ needs.deploy.outputs.url }}"
        echo "📦 Version: ${{ needs.deploy.outputs.version }}"

  rollback:
    name: 🔄 Rollback on Failure
    runs-on: ubuntu-latest
    needs: [validate-environment, deploy, health-checks]
    if: always() && (needs.deploy.result == 'failure' || needs.health-checks.result == 'failure')
    
    steps:
    - name: 🚨 Deployment failure detected
      run: |
        echo "🚨 Deployment failure detected for ${{ env.DEPLOY_ENV }}"
        echo "Deploy status: ${{ needs.deploy.result }}"
        echo "Health check status: ${{ needs.health-checks.result }}"
        
    - name: 🔄 Execute rollback
      run: |
        echo "🔄 Initiating rollback for ${{ env.DEPLOY_ENV }}..."
        # Rollback logic would go here
        sleep 5
        echo "✅ Rollback completed successfully"
        
    - name: 🔔 Rollback notification
      run: |
        echo "🔔 Sending rollback notifications..."
        echo "🚨 Deployment to ${{ env.DEPLOY_ENV }} failed and was rolled back"
        echo "🌍 Environment: ${{ needs.validate-environment.outputs.deploy-url }}"