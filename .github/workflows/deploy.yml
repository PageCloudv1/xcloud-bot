name: 🚀 Deploy

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      artifact-name:
        description: 'Build artifact to deploy'
        required: false
        default: 'build-artifacts'
        type: string
      deploy-command:
        description: 'Deploy command to run'
        required: false
        default: 'npm run deploy'
        type: string
    outputs:
      deployment-url:
        description: "Deployment URL"
        value: ${{ jobs.deploy.outputs.url }}
      deployment-status:
        description: "Deployment status"
        value: ${{ jobs.deploy.outputs.status }}
        
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
        - staging
        - production
      skip-tests:
        description: 'Skip tests before deploy'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20'
  DEPLOY_ENV: ${{ inputs.environment }}
  
jobs:
  pre-deploy:
    name: 🔍 Pre-Deploy Checks
    runs-on: ubuntu-latest
    
    outputs:
      can-deploy: ${{ steps.checks.outputs.can-deploy }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🔍 Environment validation
      id: checks
      run: |
        case "${{ env.DEPLOY_ENV }}" in
          "staging"|"production")
            echo "✅ Valid environment: ${{ env.DEPLOY_ENV }}"
            echo "can-deploy=true" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "❌ Invalid environment: ${{ env.DEPLOY_ENV }}"
            echo "can-deploy=false" >> $GITHUB_OUTPUT
            exit 1
            ;;
        esac
        
    - name: 🛡️ Security checks
      run: |
        echo "🔍 Running security checks..."
        if npm audit --audit-level=high; then
          echo "✅ No high-severity security issues found"
        else
          echo "⚠️ Security issues detected - review required"
        fi
        
  deploy:
    name: 🚀 Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.can-deploy == 'true'
    
    outputs:
      url: ${{ steps.deploy-info.outputs.url }}
      status: ${{ steps.deploy-status.outputs.status }}
      
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 📥 Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.artifact-name || 'build-artifacts' }}
        path: ./artifacts/
        
    - name: 📁 Prepare deployment files
      run: |
        if [ -d "./artifacts/dist" ]; then
          cp -r ./artifacts/dist/* ./dist/ || mkdir -p ./dist && cp -r ./artifacts/dist/* ./dist/
        elif [ -d "./artifacts/build" ]; then
          cp -r ./artifacts/build/* ./build/ || mkdir -p ./build && cp -r ./artifacts/build/* ./build/
        else
          echo "⚠️ No build artifacts found, running build..."
          npm run build
        fi
        
    - name: 🔧 Configure deployment
      run: |
        echo "🔧 Configuring deployment for ${{ env.DEPLOY_ENV }}"
        case "${{ env.DEPLOY_ENV }}" in
          "staging")
            echo "DEPLOY_URL=https://staging.xcloud-bot.example.com" >> $GITHUB_ENV
            echo "DEPLOY_BUCKET=staging-bucket" >> $GITHUB_ENV
            ;;
          "production")
            echo "DEPLOY_URL=https://xcloud-bot.example.com" >> $GITHUB_ENV
            echo "DEPLOY_BUCKET=production-bucket" >> $GITHUB_ENV
            ;;
        esac
        
    - name: 🚀 Deploy application
      run: |
        echo "🚀 Deploying to ${{ env.DEPLOY_ENV }}..."
        
        # Simulate deployment process
        echo "📤 Uploading files..."
        sleep 2
        
        # Example deployment commands (replace with actual deployment logic)
        case "${{ env.DEPLOY_ENV }}" in
          "staging")
            echo "🌱 Deploying to staging environment..."
            # aws s3 sync dist/ s3://$DEPLOY_BUCKET/ --delete
            # aws cloudfront create-invalidation --distribution-id $STAGING_DISTRIBUTION_ID --paths "/*"
            ;;
          "production")
            echo "🏭 Deploying to production environment..."
            # aws s3 sync dist/ s3://$DEPLOY_BUCKET/ --delete
            # aws cloudfront create-invalidation --distribution-id $PRODUCTION_DISTRIBUTION_ID --paths "/*"
            ;;
        esac
        
        echo "✅ Deployment completed successfully"
        
    - name: 🔍 Post-deploy verification
      run: |
        echo "🔍 Verifying deployment..."
        
        # Health check simulation
        sleep 3
        
        # You can add actual health checks here
        # curl -f $DEPLOY_URL/health || exit 1
        
        echo "✅ Deployment verification successful"
        
    - name: 📊 Deployment info
      id: deploy-info
      run: |
        echo "url=${{ env.DEPLOY_URL }}" >> $GITHUB_OUTPUT
        echo "🎉 Deployment completed!"
        echo "📍 URL: ${{ env.DEPLOY_URL }}"
        
    - name: 📊 Deployment status
      id: deploy-status
      run: |
        echo "status=success" >> $GITHUB_OUTPUT
        
  smoke-tests:
    name: 💨 Smoke Tests
    runs-on: ubuntu-latest
    needs: deploy
    if: success()
    
    steps:
    - name: 📥 Checkout repository
      uses: actions/checkout@v4
      
    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 💨 Run smoke tests
      run: |
        echo "💨 Running smoke tests against ${{ needs.deploy.outputs.url }}..."
        
        # Basic connectivity test
        if curl -f "${{ needs.deploy.outputs.url }}" > /dev/null 2>&1; then
          echo "✅ Application is responding"
        else
          echo "❌ Application not responding"
          exit 1
        fi
        
        # Run actual smoke tests if available
        if npm run test:smoke; then
          echo "✅ Smoke tests passed"
        else
          echo "⚠️ No smoke tests found"
        fi
        
  notify:
    name: 📢 Notify Deployment
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: always()
    
    steps:
    - name: 📢 Send deployment notification
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ] && [ "${{ needs.smoke-tests.result }}" == "success" ]; then
          echo "## ✅ Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Environment:** ${{ env.DEPLOY_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "🔗 **URL:** ${{ needs.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "⏰ **Time:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "👤 **Deployed by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "## ❌ Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "🚀 **Environment:** ${{ env.DEPLOY_ENV }}" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Deploy Status:** ${{ needs.deploy.result }}" >> $GITHUB_STEP_SUMMARY
          echo "❌ **Smoke Tests:** ${{ needs.smoke-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "⏰ **Time:** $(date)" >> $GITHUB_STEP_SUMMARY
        fi
        
  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    needs: [deploy, smoke-tests]
    if: failure() && github.ref == 'refs/heads/main'
    
    steps:
    - name: 🔄 Prepare rollback
      run: |
        echo "🔄 Deployment failed, preparing rollback..."
        echo "This would trigger rollback procedures"
        
    - name: 🔄 Execute rollback
      run: |
        echo "🔄 Executing rollback to previous version..."
        # Add rollback logic here
        # This could involve:
        # - Reverting to previous deployment
        # - Restoring database if needed
        # - Updating DNS records
        
    - name: 📢 Rollback notification
      run: |
        echo "## 🔄 Rollback Executed" >> $GITHUB_STEP_SUMMARY
        echo "❌ **Failed Deployment:** ${{ env.DEPLOY_ENV }}" >> $GITHUB_STEP_SUMMARY
        echo "🔄 **Rollback Status:** Completed" >> $GITHUB_STEP_SUMMARY
        echo "⏰ **Time:** $(date)" >> $GITHUB_STEP_SUMMARY