name: ü§ñ xCloud Bot Integration

# Workflow para integra√ß√£o completa do bot com GitHub
# - Analisa reposit√≥rio automaticamente
# - Monitora status do CI/CD
# - Cria issues automatizadas quando necess√°rio
#
# Secrets necess√°rios:
# - GITHUB_TOKEN: Token autom√°tico do GitHub Actions (fornecido automaticamente)
# - GITHUB_APP_ID: ID da GitHub App (opcional, para webhooks)
# - GITHUB_PRIVATE_KEY: Chave privada da GitHub App (opcional, para webhooks)
# - GEMINI_API_KEY: Chave da API Gemini (opcional, para an√°lise IA)
#
# Permiss√µes necess√°rias:
# - contents: read - Para ler o reposit√≥rio
# - issues: write - Para criar e atualizar issues
# - actions: read - Para monitorar workflows
# - pull-requests: write - Para comentar em PRs

on:
  workflow_dispatch:
    inputs:
      analyze_all:
        description: 'Analisar todos os reposit√≥rios xCloud'
        required: false
        type: boolean
        default: false
  schedule:
    - cron: '0 */6 * * *'  # A cada 6 horas
  push:
    branches:
      - main
    paths:
      - '.github/workflows/**'
      - 'src/bot/**'
      - 'src/workflows/**'

# Permiss√µes necess√°rias para o bot funcionar
permissions:
  contents: read      # Ler c√≥digo do reposit√≥rio
  issues: write       # Criar e editar issues
  actions: read       # Ler status de workflows
  pull-requests: write # Comentar em PRs

jobs:
  bot-analysis:
    runs-on: ubuntu-latest
    
    # Vari√°veis de ambiente para o bot
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      GITHUB_OWNER: ${{ github.repository_owner }}
      CI: 'true'
      NODE_ENV: 'production'
    
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Hist√≥rico completo para an√°lise
      
      - name: üîß Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'  # Cache de depend√™ncias para builds mais r√°pidos

      - name: üì¶ Install Dependencies
        run: |
          echo "üì¶ Instalando depend√™ncias..."
          npm ci --prefer-offline --no-audit
          echo "‚úÖ Depend√™ncias instaladas com sucesso"

      - name: üèóÔ∏è Build Project
        run: |
          echo "üèóÔ∏è Compilando projeto TypeScript..."
          npm run build
          echo "‚úÖ Build conclu√≠do"
          
      - name: üìä Analyze Repository
        id: analyze
        continue-on-error: true
        run: |
          echo "üìä Iniciando an√°lise do reposit√≥rio..."
          if [ "${{ github.event.inputs.analyze_all }}" == "true" ]; then
            echo "üîç Analisando todos os reposit√≥rios xCloud..."
            npm run analyze:all
          else
            echo "üîç Analisando reposit√≥rio: ${{ github.repository }}"
            npm run analyze:repo ${{ github.repository }}
          fi
          echo "‚úÖ An√°lise conclu√≠da"
          
      - name: üîç Monitor CI Status
        id: monitor
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "üîç Monitorando status do CI..."
          npm run scheduler:run
          echo "‚úÖ Monitoramento conclu√≠do"
          
      - name: ü§ñ Create Issues if Needed
        id: create_issues
        continue-on-error: true
        if: success() || steps.analyze.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "ü§ñ Verificando necessidade de criar issues..."
          npm run create:issue ${{ github.repository }} "Automated Analysis Report"
          echo "‚úÖ Verifica√ß√£o de issues conclu√≠da"
      
      - name: üìù Generate Summary
        if: always()
        run: |
          echo "## ü§ñ xCloud Bot Integration Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üìä Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Repository:** \`${{ github.repository }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** \`${{ github.event_name }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ‚úÖ Step Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Analysis:** ${{ steps.analyze.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring:** ${{ steps.monitor.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Issue Creation:** ${{ steps.create_issues.outcome }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üîó Useful Links" >> $GITHUB_STEP_SUMMARY
          echo "- [Workflow Run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
          echo "- [Repository](${{ github.server_url }}/${{ github.repository }})" >> $GITHUB_STEP_SUMMARY
          
      - name: ‚ùå Report Failure
        if: failure()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "‚ùå Workflow falhou. Criando issue para investiga√ß√£o..."
          # Note: This would create an issue about the workflow failure
          # Uncomment when ready to enable automatic failure reporting
          # gh issue create \
          #   --title "üö® Bot Integration Workflow Failed" \
          #   --body "O workflow de integra√ß√£o do bot falhou. Veja os detalhes em: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
          #   --label "bug,ci-failure,bot-integration"
