name: ðŸš€ CD - Continuous Deployment

on:
  release:
    types: [published]
  push:
    branches: [main]
  workflow_call:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '20'
  APP_NAME: xcloud-bot
  DEPLOY_PATH: /opt/xcloud-bot

jobs:
  build:
    name: ðŸ“¦ Build Application
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Create deployment package
        run: |
          mkdir -p deploy
          cp -r dist package.json package-lock.json src deploy/
          tar -czf xcloud-bot-${{ github.sha }}.tar.gz -C deploy .
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: xcloud-bot-build
          path: xcloud-bot-${{ github.sha }}.tar.gz

  deploy-production:
    name: ðŸŒŸ Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.event_name == 'release'
    environment:
      name: production
      url: http://72.167.222.237:3000
    
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: xcloud-bot-build
          
      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 72.167.222.237
          username: rootkit
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            # Update system
            sudo apt update && sudo apt upgrade -y
            
            # Install Node.js if not present
            if ! command -v node &> /dev/null; then
              curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
              sudo apt-get install -y nodejs
            fi
            
            # Install PM2 if not present
            if ! command -v pm2 &> /dev/null; then
              sudo npm install -g pm2
              sudo pm2 startup
            fi
            
            # Create application directory
            sudo mkdir -p ${{ env.DEPLOY_PATH }}
            sudo chown -R rootkit:rootkit ${{ env.DEPLOY_PATH }}
            
            # Stop existing application
            pm2 stop ${{ env.APP_NAME }} || true
            pm2 delete ${{ env.APP_NAME }} || true
            
            # Backup current deployment
            if [ -d "${{ env.DEPLOY_PATH }}/current" ]; then
              sudo mv ${{ env.DEPLOY_PATH }}/current ${{ env.DEPLOY_PATH }}/backup-$(date +%Y%m%d_%H%M%S)
            fi
            
            # Create new deployment directory
            mkdir -p ${{ env.DEPLOY_PATH }}/current
            
      - name: Upload and extract application
        uses: appleboy/scp-action@v0.1.7
        with:
          host: 72.167.222.237
          username: rootkit
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          source: "xcloud-bot-${{ github.sha }}.tar.gz"
          target: ${{ env.DEPLOY_PATH }}
          
      - name: Start application
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: 72.167.222.237
          username: rootkit
          password: ${{ secrets.SSH_PASSWORD }}
          port: 22
          script: |
            cd ${{ env.DEPLOY_PATH }}
            
            # Extract new version
            tar -xzf xcloud-bot-${{ github.sha }}.tar.gz -C current/
            
            # Install dependencies
            cd current
            npm ci --production
            
            # Create .env file if it doesn't exist
            if [ ! -f .env ]; then
              cat > .env << EOF
            NODE_ENV=production
            PORT=3000
            HOST=0.0.0.0
            EOF
            fi
            
            # Start application with PM2
            pm2 start dist/index.js --name ${{ env.APP_NAME }} --time
            pm2 save
            
            # Setup nginx if not present
            if ! command -v nginx &> /dev/null; then
              sudo apt install -y nginx
              
              # Create nginx config
              sudo tee /etc/nginx/sites-available/${{ env.APP_NAME }} > /dev/null <<EOF
            server {
                listen 80;
                server_name 72.167.222.237;
                
                location / {
                    proxy_pass http://localhost:3000;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade \$http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host \$host;
                    proxy_set_header X-Real-IP \$remote_addr;
                    proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto \$scheme;
                    proxy_cache_bypass \$http_upgrade;
                }
            }
            EOF
              
              # Enable site
              sudo ln -sf /etc/nginx/sites-available/${{ env.APP_NAME }} /etc/nginx/sites-enabled/
              sudo nginx -t && sudo systemctl reload nginx
            fi
            
            # Clean old deployments (keep last 3)
            find ${{ env.DEPLOY_PATH }} -name "backup-*" -type d | head -n -3 | xargs rm -rf
            
            echo "âœ… Deployment completed successfully!"
            echo "ðŸš€ Application running at: http://72.167.222.237"
            pm2 status