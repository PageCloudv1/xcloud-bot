#!/usr/bin/env node

const { Octokit } = require('@octokit/rest');
const fs = require('fs');
const path = require('path');
const { multiRepoManager } = require('../src/config/multi-repo');
const logger = require('../src/utils/logger');

/**
 * Script para expandir o xCloud Bot para outros reposit√≥rios
 */
class RepoExpansion {
  constructor() {
    this.octokit = new Octokit({
      auth: process.env.GITHUB_TOKEN,
      userAgent: 'xcloud-bot-expansion/1.0.0'
    });
  }

  /**
   * Expande o bot para um reposit√≥rio espec√≠fico
   * @param {string} owner - Propriet√°rio do reposit√≥rio
   * @param {string} repo - Nome do reposit√≥rio
   * @param {Object} options - Op√ß√µes de configura√ß√£o
   */
  async expandToRepository(owner, repo, options = {}) {
    try {
      console.log(`üöÄ Expandindo xCloud Bot para ${owner}/${repo}...`);

      // Verificar se o reposit√≥rio existe e temos acesso
      const { data: repoData } = await this.octokit.rest.repos.get({
        owner,
        repo
      });

      console.log(`‚úÖ Reposit√≥rio encontrado: ${repoData.full_name}`);

      // Configura√ß√£o padr√£o
      const config = {
        features: {
          autoReview: true,
          geminiIntegration: true,
          issueManagement: true,
          prAutomation: true,
          securityScanning: false,
          performanceMonitoring: false,
          ...options.features
        },
        workflows: {
          'auto-copilot-review': true,
          'enhanced-gemini-cli': true,
          'gemini-review': true,
          'gemini-triage': true,
          ...options.workflows
        }
      };

      // Criar workflows no reposit√≥rio de destino
      await this.createWorkflows(owner, repo, config);

      // Criar configura√ß√£o do bot
      await this.createBotConfiguration(owner, repo, config);

      // Atualizar README
      await this.updateReadme(owner, repo);

      // Criar issue de boas-vindas
      await this.createWelcomeIssue(owner, repo, config);

      // Registrar no multi-repo manager (se tiver installationId)
      if (options.installationId) {
        await multiRepoManager.registerRepository(owner, repo, options.installationId, config);
      }

      console.log(`üéâ xCloud Bot expandido com sucesso para ${owner}/${repo}!`);
      
      return {
        success: true,
        repository: `${owner}/${repo}`,
        config
      };

    } catch (error) {
      console.error(`‚ùå Erro ao expandir para ${owner}/${repo}:`, error.message);
      return {
        success: false,
        repository: `${owner}/${repo}`,
        error: error.message
      };
    }
  }

  /**
   * Cria workflows no reposit√≥rio de destino
   */
  async createWorkflows(owner, repo, config) {
    console.log('üì• Criando workflows...');

    const workflowsToCreate = [];

    // Auto Copilot Review
    if (config.workflows['auto-copilot-review']) {
      workflowsToCreate.push({
        path: '.github/workflows/auto-copilot-review.yml',
        source: '.github/workflows/auto-copilot-review.yml'
      });
    }

    // Enhanced Gemini CLI
    if (config.workflows['enhanced-gemini-cli']) {
      workflowsToCreate.push({
        path: '.github/workflows/enhanced-gemini-cli.yml',
        source: '.github/workflows/enhanced-gemini-cli.yml'
      });
    }

    // Gemini Review
    if (config.workflows['gemini-review']) {
      workflowsToCreate.push({
        path: '.github/workflows/gemini-review.yml',
        source: '.github/workflows/gemini-review.yml'
      });
    }

    // Gemini Triage
    if (config.workflows['gemini-triage']) {
      workflowsToCreate.push({
        path: '.github/workflows/gemini-triage.yml',
        source: '.github/workflows/gemini-triage.yml'
      });
    }

    // Criar cada workflow
    for (const workflow of workflowsToCreate) {
      try {
        // Ler conte√∫do do workflow local
        const workflowPath = path.join(__dirname, '..', workflow.source);
        const content = fs.readFileSync(workflowPath, 'utf8');

        // Verificar se j√° existe
        let existingFile = null;
        try {
          const { data } = await this.octokit.rest.repos.getContent({
            owner,
            repo,
            path: workflow.path
          });
          existingFile = data;
        } catch (error) {
          // Arquivo n√£o existe, tudo bem
        }

        if (existingFile) {
          // Atualizar arquivo existente
          await this.octokit.rest.repos.createOrUpdateFileContents({
            owner,
            repo,
            path: workflow.path,
            message: `ü§ñ Update xCloud Bot workflow: ${path.basename(workflow.path)}`,
            content: Buffer.from(content).toString('base64'),
            sha: existingFile.sha
          });
          console.log(`  ‚úÖ Atualizado: ${workflow.path}`);
        } else {
          // Criar novo arquivo
          await this.octokit.rest.repos.createOrUpdateFileContents({
            owner,
            repo,
            path: workflow.path,
            message: `ü§ñ Add xCloud Bot workflow: ${path.basename(workflow.path)}`,
            content: Buffer.from(content).toString('base64')
          });
          console.log(`  ‚úÖ Criado: ${workflow.path}`);
        }

        // Aguardar um pouco entre cria√ß√µes
        await new Promise(resolve => setTimeout(resolve, 1000));

      } catch (error) {
        console.error(`  ‚ùå Erro ao criar ${workflow.path}:`, error.message);
      }
    }
  }

  /**
   * Cria configura√ß√£o do bot no reposit√≥rio
   */
  async createBotConfiguration(owner, repo, config) {
    console.log('üìÑ Criando configura√ß√£o do bot...');

    const configContent = {
      repository: `${owner}/${repo}`,
      features: config.features,
      workflows: config.workflows,
      setupDate: new Date().toISOString(),
      version: '1.0.0'
    };

    try {
      // Verificar se j√° existe
      let existingFile = null;
      try {
        const { data } = await this.octokit.rest.repos.getContent({
          owner,
          repo,
          path: '.xcloud-bot/config.json'
        });
        existingFile = data;
      } catch (error) {
        // Arquivo n√£o existe
      }

      const content = JSON.stringify(configContent, null, 2);

      if (existingFile) {
        await this.octokit.rest.repos.createOrUpdateFileContents({
          owner,
          repo,
          path: '.xcloud-bot/config.json',
          message: 'ü§ñ Update xCloud Bot configuration',
          content: Buffer.from(content).toString('base64'),
          sha: existingFile.sha
        });
      } else {
        await this.octokit.rest.repos.createOrUpdateFileContents({
          owner,
          repo,
          path: '.xcloud-bot/config.json',
          message: 'ü§ñ Add xCloud Bot configuration',
          content: Buffer.from(content).toString('base64')
        });
      }

      console.log('  ‚úÖ Configura√ß√£o criada!');
    } catch (error) {
      console.error('  ‚ùå Erro ao criar configura√ß√£o:', error.message);
    }
  }

  /**
   * Atualiza README com se√ß√£o do bot
   */
  async updateReadme(owner, repo) {
    console.log('üìö Atualizando README...');

    try {
      // Obter README atual
      let readmeData = null;
      let readmePath = 'README.md';

      try {
        const { data } = await this.octokit.rest.repos.getContent({
          owner,
          repo,
          path: readmePath
        });
        readmeData = data;
      } catch (error) {
        // README n√£o existe, ser√° criado
      }

      const botSection = `

## ü§ñ xCloud Bot

Este reposit√≥rio est√° integrado com o xCloud Bot para automa√ß√£o e assist√™ncia em desenvolvimento.

### Features Ativas

- ‚úÖ **Auto Review**: Reviews autom√°ticos com @Copilot
- üß† **Gemini Integration**: An√°lise de c√≥digo com IA
- üìù **Issue Management**: Gerenciamento inteligente de issues
- üîÑ **PR Automation**: Automa√ß√£o de pull requests

### Como Usar

O bot responde automaticamente a:
- Novos issues e pull requests
- Coment√°rios mencionando @Copilot
- Comandos espec√≠ficos nos coment√°rios

### Comandos Dispon√≠veis

- \`@Copilot review this\` - Solicita review detalhado
- \`@Copilot analyze code\` - An√°lise de c√≥digo
- \`@Copilot suggest improvements\` - Sugest√µes de melhorias
- \`@Copilot security scan\` - Verifica√ß√£o de seguran√ßa

---
*Powered by [xCloud Bot](https://github.com/PageCloudv1/xcloud-bot)*`;

      let newContent;

      if (readmeData) {
        // README existe, verificar se j√° tem se√ß√£o do bot
        const currentContent = Buffer.from(readmeData.content, 'base64').toString('utf8');
        
        if (currentContent.includes('## ü§ñ xCloud Bot')) {
          console.log('  ‚ÑπÔ∏è Se√ß√£o do xCloud Bot j√° existe no README');
          return;
        }

        newContent = currentContent + botSection;
      } else {
        // Criar novo README
        newContent = `# ${repo}${botSection}`;
      }

      if (readmeData) {
        await this.octokit.rest.repos.createOrUpdateFileContents({
          owner,
          repo,
          path: readmePath,
          message: 'ü§ñ Add xCloud Bot section to README',
          content: Buffer.from(newContent).toString('base64'),
          sha: readmeData.sha
        });
      } else {
        await this.octokit.rest.repos.createOrUpdateFileContents({
          owner,
          repo,
          path: readmePath,
          message: 'ü§ñ Create README with xCloud Bot section',
          content: Buffer.from(newContent).toString('base64')
        });
      }

      console.log('  ‚úÖ README atualizado!');
    } catch (error) {
      console.error('  ‚ùå Erro ao atualizar README:', error.message);
    }
  }

  /**
   * Cria issue de boas-vindas
   */
  async createWelcomeIssue(owner, repo, config) {
    console.log('üéâ Criando issue de boas-vindas...');

    const welcomeMessage = `# üéâ xCloud Bot Configurado com Sucesso!

Ol√°! O xCloud Bot foi configurado neste reposit√≥rio e est√° pronto para ajudar.

## üöÄ Features Ativas

${Object.entries(config.features)
  .filter(([_, enabled]) => enabled)
  .map(([feature, _]) => `- ‚úÖ **${feature}**`)
  .join('\n')}

## ü§ñ Como Usar

O bot agora responder√° automaticamente a:

- **Novos Issues**: An√°lise autom√°tica e triagem
- **Pull Requests**: Reviews autom√°ticos e sugest√µes
- **Coment√°rios**: Responde a men√ß√µes e comandos

## üìã Comandos Dispon√≠veis

Voc√™ pode usar os seguintes comandos nos coment√°rios:

- \`@Copilot review this\` - Solicita review detalhado
- \`@Copilot analyze code\` - An√°lise de c√≥digo
- \`@Copilot suggest improvements\` - Sugest√µes de melhorias
- \`@Copilot security scan\` - Verifica√ß√£o de seguran√ßa

## üîß Configura√ß√£o

A configura√ß√£o do bot est√° em \`.xcloud-bot/config.json\`. Voc√™ pode modificar as features ativas editando este arquivo.

## üìö Documenta√ß√£o

Para mais informa√ß√µes, consulte a [documenta√ß√£o completa](https://github.com/PageCloudv1/xcloud-bot).

---

**Pr√≥ximos Passos:**
1. ‚úÖ Bot configurado
2. üîÑ Teste criando um novo issue ou PR
3. üéØ Personalize as configura√ß√µes conforme necess√°rio

*Este issue foi criado automaticamente pela expans√£o do xCloud Bot.*`;

    try {
      await this.octokit.rest.issues.create({
        owner,
        repo,
        title: 'ü§ñ xCloud Bot - Configura√ß√£o Conclu√≠da',
        body: welcomeMessage,
        labels: ['xcloud-bot', 'setup', 'documentation']
      });

      console.log('  ‚úÖ Issue de boas-vindas criado!');
    } catch (error) {
      console.error('  ‚ùå Erro ao criar issue:', error.message);
    }
  }

  /**
   * Expande para m√∫ltiplos reposit√≥rios
   */
  async expandToMultipleRepositories(repositories, options = {}) {
    console.log(`üöÄ Expandindo para ${repositories.length} reposit√≥rios...`);

    const results = [];

    for (const repoInfo of repositories) {
      const [owner, repo] = repoInfo.split('/');
      const result = await this.expandToRepository(owner, repo, {
        ...options,
        ...repoInfo.options
      });
      results.push(result);

      // Aguardar entre expans√µes para evitar rate limiting
      await new Promise(resolve => setTimeout(resolve, 2000));
    }

    // Resumo
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;

    console.log(`\nüìä Resumo da expans√£o:`);
    console.log(`  ‚úÖ Sucessos: ${successful}`);
    console.log(`  ‚ùå Falhas: ${failed}`);

    if (failed > 0) {
      console.log(`\n‚ùå Reposit√≥rios com falha:`);
      results.filter(r => !r.success).forEach(r => {
        console.log(`  - ${r.repository}: ${r.error}`);
      });
    }

    return results;
  }
}

// CLI
if (require.main === module) {
  const args = process.argv.slice(2);
  
  if (args.length === 0) {
    console.log(`
ü§ñ xCloud Bot Repository Expansion

Uso:
  node expand-to-repo.js <owner/repo> [options]
  node expand-to-repo.js --batch <file.json>

Exemplos:
  node expand-to-repo.js PageCloudv1/my-project
  node expand-to-repo.js --batch repos.json

Vari√°veis de ambiente necess√°rias:
  GITHUB_TOKEN - Token do GitHub com permiss√µes adequadas
`);
    process.exit(1);
  }

  const expansion = new RepoExpansion();

  if (args[0] === '--batch') {
    // Expans√£o em lote
    const batchFile = args[1];
    if (!batchFile) {
      console.error('‚ùå Arquivo de lote n√£o especificado');
      process.exit(1);
    }

    try {
      const repositories = JSON.parse(fs.readFileSync(batchFile, 'utf8'));
      expansion.expandToMultipleRepositories(repositories);
    } catch (error) {
      console.error('‚ùå Erro ao ler arquivo de lote:', error.message);
      process.exit(1);
    }
  } else {
    // Expans√£o √∫nica
    const [owner, repo] = args[0].split('/');
    if (!owner || !repo) {
      console.error('‚ùå Formato inv√°lido. Use: owner/repo');
      process.exit(1);
    }

    expansion.expandToRepository(owner, repo);
  }
}

module.exports = { RepoExpansion };